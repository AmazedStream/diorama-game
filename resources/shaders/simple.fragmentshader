#version 330

uniform sampler2D diffuse_map;
uniform sampler2D normal_map;

uniform vec3 ambient_rgb;
uniform vec3 sunlight_direction;
uniform vec3 sunlight_rgb;

in vec2 final_uv;
in vec2 final_uv2;
in vec3 final_normal;
in vec3 final_tangent;

out vec4 color;

void main()
{
	vec3 colorTemp;

	vec3 bitangent = cross (final_normal, final_tangent);

	vec3 offset = texture (normal_map, final_uv2).rgb * 2.0f - vec3 (1.0f);

	vec3 normal = final_normal;
	normal = normal + (offset.x * final_tangent) + (offset.x * bitangent);
	normal = normal + (offset.z * final_tangent) + (offset.z * bitangent);

	normal = normalize (normal);

	//vec3 normal = final_normal;

	float diffuse_lighting = dot (sunlight_direction, normal);
	diffuse_lighting = clamp (diffuse_lighting, -1.0, 0.0);
	colorTemp = ambient_rgb + vec3 (-diffuse_lighting) * sunlight_rgb;

	//float tint = (vertex_position.y / 96.0f) * 0.2f + 0.8f;
	//colorTemp = colorTemp * vec3 (tint);

	colorTemp = colorTemp * texture (diffuse_map, final_uv).rgb;

	vec3 fog_color = vec3 (47.0f / 255.0f, 188.0f / 255.0f, 235.0f / 255.0f);
	float fog_coeff = gl_FragCoord.z;
	fog_coeff *= fog_coeff;
	fog_coeff *= fog_coeff;
	fog_coeff *= fog_coeff;
	fog_coeff *= fog_coeff;
	fog_coeff *= fog_coeff;
	fog_coeff *= fog_coeff;
	fog_coeff *= fog_coeff;
	fog_coeff *= fog_coeff;
	fog_coeff *= fog_coeff;
	fog_coeff *= fog_coeff;
	
	// look at smoothstep

	colorTemp = mix (colorTemp, fog_color, fog_coeff);
	color.rgb = colorTemp;
	color.a = 1.0;

}
